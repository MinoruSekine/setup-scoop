name: 'Setup scoop'
description: 'Integrate scoop command line installer into your workflow on Windows runner.'
branding:
  icon: 'hard-drive'
  color: 'green'
inputs:
  install_scoop:
    description: 'Install scoop if true (default)'
    required: true
    default: 'true'
  add_extras_bucket:
    description: 'Add extras bucket if true, this is obsoleted and use buckets: "extras"'
    required: true
    default: 'false'
  add_nonportable_bucket:
    description: 'Add nonportable bucket if true, this is obsoleted and use buckets: "nonportable"'
    required: true
    default: 'false'
  scoop_update:
    description: 'Call scoop update if true (default)'
    required: true
    default: 'true'
  scoop_checkup:
    description: 'Call scoop checkup if true'
    required: true
    default: 'false'
  update_path:
    description: 'Update environment variable PATH for workflow if true (default)'
    required: true
    default: 'true'
  buckets:
    description: 'Bucket(s) to add, delimit several buckets by white space'
    required: false
    default: ''
  run_as_admin:
    description: 'Install scoop with `-RunAsAdmin` or not'
    required: false
    default: true
runs:
  using: "composite"
  steps:
    - name: 'Setup scoop'
      shell: pwsh
      run: |
        if('${{ inputs.install_scoop }}' -eq 'true') {
            iwr get.scoop.sh -outfile 'install.ps1'
            if('${{ inputs.run_as_admin }}' -eq 'true') {
                .\install.ps1 -RunAsAdmin
            } else {
                .\install.ps1
            }
        }
        if('${{ inputs.update_path }}' -eq 'true') {Join-Path (Resolve-Path ~).Path "scoop\shims" >> $Env:GITHUB_PATH}
        Write-Host inputs.buckets ${{ inputs.buckets }}
        $param_buckets_string = "${{ inputs.buckets }}"
        Write-Host param_buckets_string $param_buckets_string
        [string[]] $buckets = @()
        if($param_buckets_string) {
            $buckets = $param_buckets_string.Split(" ")
        }
        if('${{ inputs.add_extras_bucket }}' -eq 'true') {$buckets += "extras"}
        if('${{ inputs.add_nonportable_bucket }}' -eq 'true') {$buckets += "nonportable"}
        Write-Host buckets $buckets
        if($buckets.count -ge 1) {
            $known_buckets=scoop bucket known
            foreach($bucket in $buckets) {
                if($null -eq ($known_buckets | Where-Object {$_ -eq $bucket})) {
                    Write-Error "Bucket `"$bucket`" is unknown." -ErrorAction Stop
                }
                Write-Host bucket $bucket
                scoop bucket add $bucket
            }
        }
        if('${{ inputs.scoop_update }}' -eq 'true') {scoop update}
        if('${{ inputs.scoop_checkup }}' -eq 'true') {scoop checkup}
        if('${{ inputs.install_scoop }}' -eq 'true' -Or $buckets.count -gt 0) {
            scoop --version
        }
